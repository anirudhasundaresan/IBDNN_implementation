Personal reminders:
- Upload git bundle or Jupyter notebook (Done)
- Make sure there are comments explaining every loc (not needed)
- Upload by Monday 7pm (Done)
- Understand why I am doing this; how it relates to the job
- Send git link, so they can track progress (Done)
- Send an update to C????? and V???? after you finish the codes (Done)

Notes:
- The two references seem to be unrelated; the [2] is an application for [1] - surface level realization [Done]
- Make sure you are running this on fashion dataset and not on MNIST (Done)
- Go through issues in the main repo before choosing an architecture - try variations
  - Try the IDNN architecture with the MNIST data first; see if you are able to reproduce results (https://github.com/ravidziv/IDNNs)
  - Try the IDNN with fashion_MNIST data and see if you can get it working
  - Try ibsgd with MNIST and see if you can replicate work (https://github.com/artemyk/ibsgd/tree/iclr2018)
  - Try ibsgd with fashion_MNIST and see if you can replicate work

Plan of action:
- Read through [1], read through [2], and then try implementations (Done)
- You will need an architecture that can help you visualize what's being asked from [2] - best to use the architecture used by the authors themselves! - (Done)

Coding specifics:
-----------------
(for working with IDNN code - not using this now)
- Using docker image: tensorflow/tensorflow:latest-gpu-py3
- Latest commit for this code is on Nov-2017. Make changes to the code for issues after that date.
    - Changed 'parmas' to 'params' - change in code required
- Removed existing docker : tensorflow/tensorflow:latest-gpu, since this code is in py3 and system required more space.
- Within the docker:
    - Installed joblib (pip install joblib)
    - Installed tkinter, but required a update first (apt-get update && apt-get install python3-tk)
- Made changes in idnns/networks/utils.py to get this working with fashion_mnist dataset.
- Note: previously, the code ran faster on var_u.mat, not sure what it is, need to explore more. I think it is binary representation of MNIST data; in which case we need
the same for fashion_mnist.

(for working with IBSGD code - final output with this)
- Use docker image: ermaker/keras with tag='gpu' --> has py3
- pip install seaborn (also installs matplotlib), pathlib2
- convert all cPickle to pickle
- convert ipynb to .py files - jupyter nbconvert --to script '<name_of_file>.ipynb'
- play around with different network archs and relu/tanh

Improvements:
- After a long effort (and experimenting this on my Mac and Ubuntu system), I discontinued using the main IDNN codes, since they were confusing and there are many changes to be made to make it work with MNIST data. (Removing the IDNN codes from this repo and bringing in code which works)
- I started using the codes written here: https://github.com/artemyk/ibsgd/tree/iclr2018 -- gives perfect results to what is being asked.
- If you look at plots, overfitting seems to start at ~1000 epochs (the plot is in log scale), so we should likely stop the training much earlier than 10000 epochs. 
